/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package teststuff;

import control.ControlDistribucionVolumen;
import entidades.Macrociclo;
import entidades.MedioFisico;
import entidades.Mesociclo;
import enumeradores.Etapa;
import java.util.List;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import org.bson.types.ObjectId;

/**
 *
 * @author luisg
 */
public class TestDistribucionVolumen extends javax.swing.JFrame {
    
    public static Macrociclo macrociclo;
    private MacrocicloDAOTest dao = new MacrocicloDAOTest();
    private ControlDistribucionVolumen controlDistribucionVolumen;

    /**
     * Creates new form TestDistribucionVolumen
     */
    public TestDistribucionVolumen() {
        initComponents();
        
        macrociclo = this.dao.obtenerMacrociclo(new ObjectId("6540abc7eb7a0415d79ba288"));
        this.cargarTablas();
        this.controlDistribucionVolumen = new ControlDistribucionVolumen();
        this.crearListeners();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPaneTablaGeneral = new javax.swing.JScrollPane();
        tablaGeneral = new javax.swing.JTable();
        scrollPaneTablaEspecial = new javax.swing.JScrollPane();
        tablaEspecial = new javax.swing.JTable();
        scrollPaneTablaCompetitiva = new javax.swing.JScrollPane();
        tablaCompetitiva = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Distribución de volumen");

        tablaGeneral.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        scrollPaneTablaGeneral.setViewportView(tablaGeneral);

        tablaEspecial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        scrollPaneTablaEspecial.setViewportView(tablaEspecial);

        tablaCompetitiva.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        scrollPaneTablaCompetitiva.setViewportView(tablaCompetitiva);

        jLabel1.setText("Mesociclos Etapa General");

        jLabel2.setText("Mesociclos Etapa Especial");

        jLabel3.setText("Mesociclos Etapa Competitiva");

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(291, 291, 291))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(288, 288, 288)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(303, 303, 303)
                        .addComponent(btnGuardar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrollPaneTablaGeneral)
                        .addContainerGap())
                    .addComponent(scrollPaneTablaEspecial)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollPaneTablaCompetitiva)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(265, 265, 265)
                                .addComponent(jLabel3)
                                .addGap(284, 284, 284)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(scrollPaneTablaGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(scrollPaneTablaEspecial, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(scrollPaneTablaCompetitiva, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(btnGuardar)
                .addGap(28, 28, 28))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        this.controlDistribucionVolumen.guardarDistribucionesVolumenes(this, macrociclo, (DefaultTableModel) tablaGeneral.getModel(), (DefaultTableModel) tablaEspecial.getModel(), (DefaultTableModel) tablaCompetitiva.getModel());
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void cargarTablas() {
        List<MedioFisico> lista = TestDistribucionVolumen.macrociclo.getMediosFisicos();
        List<Mesociclo> listaM = TestDistribucionVolumen.macrociclo.getMesociclos();
        DefaultTableModel modeloTablaGeneral = (DefaultTableModel) TestDistribucionVolumen.tablaGeneral.getModel();
        DefaultTableModel modeloTablaEspecial = (DefaultTableModel) TestDistribucionVolumen.tablaEspecial.getModel();
        DefaultTableModel modeloTablaCompetitiva = (DefaultTableModel) TestDistribucionVolumen.tablaCompetitiva.getModel();
        
        modeloTablaGeneral.setColumnCount(0);
        modeloTablaGeneral.setRowCount(0);
        modeloTablaEspecial.setColumnCount(0);
        modeloTablaEspecial.setRowCount(0);
        modeloTablaCompetitiva.setColumnCount(0);
        modeloTablaCompetitiva.setRowCount(0);
        
        modeloTablaGeneral.addColumn("Medios físicos");
        modeloTablaGeneral.addColumn("Volumen total");
        modeloTablaEspecial.addColumn("Medios físicos");
        modeloTablaEspecial.addColumn("Volumen total");
        modeloTablaCompetitiva.addColumn("Medios físicos");
        modeloTablaCompetitiva.addColumn("Volumen total");
        
        listaM.forEach(m -> {
            if (m.getEtapa().equals(Etapa.GENERAL)) {
                modeloTablaGeneral.addColumn("Vol");
                modeloTablaGeneral.addColumn("%");
            } else if (m.getEtapa().equals(Etapa.ESPECIAL)) {
                modeloTablaEspecial.addColumn("Vol");
                modeloTablaEspecial.addColumn("%");
            } else if (m.getEtapa().equals(Etapa.COMPETITIVA)) {
                modeloTablaCompetitiva.addColumn("Vol");
                modeloTablaCompetitiva.addColumn("%");
            }
        });
        
        lista.forEach(mF -> {
            if (mF.getEtapa().equals(Etapa.GENERAL)) {
                Object[] fila = new Object[modeloTablaGeneral.getColumnCount()];
                fila[0] = mF.getNombre();
                fila[1] = mF.getVolumen();
                modeloTablaGeneral.addRow(fila);
            } else if (mF.getEtapa().equals(Etapa.ESPECIAL)) {
                Object[] fila = new Object[modeloTablaEspecial.getColumnCount()];
                fila[0] = mF.getNombre();
                fila[1] = mF.getVolumen();
                modeloTablaEspecial.addRow(fila);
            } else if (mF.getEtapa().equals(Etapa.COMPETITIVA)) {
                Object[] fila = new Object[modeloTablaCompetitiva.getColumnCount()];
                fila[0] = mF.getNombre();
                fila[1] = mF.getVolumen();
                modeloTablaCompetitiva.addRow(fila);
            }
        });
    }
    
    private void crearListeners() {
        DefaultTableModel modeloTablaGeneral = (DefaultTableModel) TestDistribucionVolumen.tablaGeneral.getModel();
        DefaultTableModel modeloTablaEspecial = (DefaultTableModel) TestDistribucionVolumen.tablaEspecial.getModel();
        DefaultTableModel modeloTablaCompetitiva = (DefaultTableModel) TestDistribucionVolumen.tablaCompetitiva.getModel();
        
        modeloTablaGeneral.addTableModelListener(new TableModelListener() {
            
            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    int row = e.getFirstRow();
                    int column = e.getColumn();
                    
                    if (!TestDistribucionVolumen.isPair(column)) {
                        Object porcentajeObject = modeloTablaGeneral.getValueAt(row, column);
                        float porcentaje = Float.parseFloat(porcentajeObject.toString());

                        Object volumenTotalObject = modeloTablaGeneral.getValueAt(row, 1);
                        float volumenTotal = Float.parseFloat(volumenTotalObject.toString());
                        float volumenMesociclo = (porcentaje * volumenTotal) / 100f;

                        Object[] oldFila = new Object[modeloTablaGeneral.getColumnCount()];
                        
                        for (int i = 0; i < oldFila.length; i++) {
                            if (i == column) {
                                oldFila[i] = Float.parseFloat(porcentajeObject.toString());
                            } else if (i == (column - 1)) {
                                oldFila[i] = volumenMesociclo;
                            } else {
                                oldFila[i] = modeloTablaGeneral.getValueAt(row, i);
                            }
                        }

                        modeloTablaGeneral.setRowCount(0);

                        TestDistribucionVolumen.macrociclo.getMediosFisicos().forEach(mF -> {
                            if (mF.getEtapa().equals(Etapa.GENERAL)) {
                                if (oldFila[0].toString().equals(mF.getNombre())) {
                                    modeloTablaGeneral.addRow(oldFila);
                                } else {
                                    Object[] fila = new Object[modeloTablaGeneral.getColumnCount()];
                                    fila[0] = mF.getNombre();
                                    fila[1] = mF.getVolumen();
                                    modeloTablaGeneral.addRow(fila);
                                }
                            }
                        });
                    }
                }
            }
        });
        
        modeloTablaEspecial.addTableModelListener(new TableModelListener() {
            
            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    int row = e.getFirstRow();
                    int column = e.getColumn();
                    
                    if (!TestDistribucionVolumen.isPair(column)) {
                        Object porcentajeObject = modeloTablaEspecial.getValueAt(row, column);
                        float porcentaje = Float.parseFloat(porcentajeObject.toString());

                        Object volumenTotalObject = modeloTablaEspecial.getValueAt(row, 1);
                        float volumenTotal = Float.parseFloat(volumenTotalObject.toString());
                        float volumenMesociclo = (porcentaje * volumenTotal) / 100f;

                        Object[] oldFila = new Object[modeloTablaEspecial.getColumnCount()];
                        
                        for (int i = 0; i < oldFila.length; i++) {
                            if (i == column) {
                                oldFila[i] = Float.parseFloat(porcentajeObject.toString());
                            } else if (i == (column - 1)) {
                                oldFila[i] = volumenMesociclo;
                            } else {
                                oldFila[i] = modeloTablaEspecial.getValueAt(row, i);
                            }
                        }

                        modeloTablaEspecial.setRowCount(0);

                        TestDistribucionVolumen.macrociclo.getMediosFisicos().forEach(mF -> {
                            if (mF.getEtapa().equals(Etapa.ESPECIAL)) {
                                if (oldFila[0].toString().equals(mF.getNombre())) {
                                    modeloTablaEspecial.addRow(oldFila);
                                } else {
                                    Object[] fila = new Object[modeloTablaEspecial.getColumnCount()];
                                    fila[0] = mF.getNombre();
                                    fila[1] = mF.getVolumen();
                                    modeloTablaEspecial.addRow(fila);
                                }
                            }
                        });
                    }
                }
            }
        });
        
        modeloTablaCompetitiva.addTableModelListener(new TableModelListener() {
            
            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    int row = e.getFirstRow();
                    int column = e.getColumn();
                    
                    if (!TestDistribucionVolumen.isPair(column)) {
                        Object porcentajeObject = modeloTablaGeneral.getValueAt(row, column);
                        float porcentaje = Float.parseFloat(porcentajeObject.toString());

                        Object volumenTotalObject = modeloTablaCompetitiva.getValueAt(row, 1);
                        float volumenTotal = Float.parseFloat(volumenTotalObject.toString());
                        float volumenMesociclo = (porcentaje * volumenTotal) / 100f;

                        Object[] oldFila = new Object[modeloTablaCompetitiva.getColumnCount()];
                        
                        for (int i = 0; i < oldFila.length; i++) {
                            if (i == column) {
                                oldFila[i] = Float.parseFloat(porcentajeObject.toString());
                            } else if (i == (column - 1)) {
                                oldFila[i] = volumenMesociclo;
                            } else {
                                oldFila[i] = modeloTablaCompetitiva.getValueAt(row, i);
                            }
                        }

                        modeloTablaCompetitiva.setRowCount(0);

                        TestDistribucionVolumen.macrociclo.getMediosFisicos().forEach(mF -> {
                            if (mF.getEtapa().equals(Etapa.COMPETITIVA)) {
                                if (oldFila[0].toString().equals(mF.getNombre())) {
                                    modeloTablaCompetitiva.addRow(oldFila);
                                } else {
                                    Object[] fila = new Object[modeloTablaCompetitiva.getColumnCount()];
                                    fila[0] = mF.getNombre();
                                    fila[1] = mF.getVolumen();
                                    modeloTablaCompetitiva.addRow(fila);
                                }
                            }
                        });
                    }
                }
            }
        });
    }
    
    public static boolean isPair(int numero) {
        return numero % 2 == 0;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestDistribucionVolumen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestDistribucionVolumen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestDistribucionVolumen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestDistribucionVolumen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestDistribucionVolumen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane scrollPaneTablaCompetitiva;
    private javax.swing.JScrollPane scrollPaneTablaEspecial;
    private javax.swing.JScrollPane scrollPaneTablaGeneral;
    public static javax.swing.JTable tablaCompetitiva;
    public static javax.swing.JTable tablaEspecial;
    public static javax.swing.JTable tablaGeneral;
    // End of variables declaration//GEN-END:variables
}
